syntax = "proto3";

import "google/protobuf/empty.proto";
import "SharedProtos/contracts.proto";

package echo_sphere.users.grpc;

service UserProfileService {
	rpc GetUserProfiles (google.protobuf.Empty) returns (GetUserProfilesResponse);

	rpc GetUserProfile (echo_sphere.grpc_shared.contracts.UserIdDto) returns (UserProfileDto);

	rpc GetBasicUserProfile (echo_sphere.grpc_shared.contracts.UserIdDto) returns (BasicUserProfileDto);

	rpc CheckUsersExistence (UserIdsDto) returns (CheckUsersExistenceResponse);
}

service FriendService {
	rpc GetFriends (echo_sphere.grpc_shared.contracts.UserIdDto) returns (UserIdsDto);

	rpc SendFriendInvite (echo_sphere.grpc_shared.contracts.UserIdDto) returns (google.protobuf.Empty);

	rpc GetCurrentUserFriendInvites (google.protobuf.Empty) returns (GetFriendInvitesResponse);

	rpc AcceptFriendInvite (FriendInvitationIdDto) returns (google.protobuf.Empty);

	rpc RejectFriendInvite (FriendInvitationIdDto) returns (google.protobuf.Empty);
}

service FollowService {
	rpc Follow (FollowRequest) returns (google.protobuf.Empty);

	rpc GetFollowers (echo_sphere.grpc_shared.contracts.UserIdDto) returns (UserIdsDto);
}

message UserIdsDto {
	repeated string ids = 1;
}

message FollowRequest {
	string follower_user_id = 1;
	string follow_user_id = 2;
}

message FollowErrorDto {
	oneof error {
		google.protobuf.Empty current_user_not_found = 1;
		google.protobuf.Empty follow_user_not_found = 2;
		google.protobuf.Empty already_followed = 3;
	}
}

message FriendInvitationIdDto {
	string value = 1;
}

message FriendInvitationDto {
	string id = 1;
	string from_user_id = 2;
}

message SendFriendInviteErrorDto {
	oneof error {
		google.protobuf.Empty current_user_not_found = 1;
		google.protobuf.Empty to_user_not_found = 2;
		google.protobuf.Empty already_sent = 3;
		google.protobuf.Empty already_friend = 4;
	}
}

message FriendInviteErrorDto {
	oneof error {
		google.protobuf.Empty invitation_not_found = 1;
	}
}

message GetFriendInvitesResponse {
	repeated FriendInvitationDto invitations = 1;
}

message GetUserProfilesResponse {
	repeated UserProfileDto profiles = 1;
}

message BasicUserProfileDto {
	string id = 1;
	string first_name = 2;
	string second_name = 3;
}

message UserProfileDto {
	string id = 1;
	string first_name = 2;
	string second_name = 3;
}

message UserExistence {
	string user_id = 1;
	bool exists = 2;
}

message CheckUsersExistenceResponse {
	repeated UserExistence users_existence = 1;
}