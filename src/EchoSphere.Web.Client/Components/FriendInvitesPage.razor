@page "/friendInvites"
@using EchoSphere.ApiGateway.Client
@using EchoSphere.ApiGateway.Contracts
@using EchoSphere.BlazorShared

@inject IUserProfileClient UserProfileClient;
@inject IFriendClient FriendClient;
@inject LongOperationExecutor LongOperationExecutor;

<div>
	@foreach (var inviteFrom in _invitesFrom)
	{
		<div style="border: 1px solid black; padding: 10px">
			<div>@inviteFrom.UserProfile.FirstName @inviteFrom.UserProfile.SecondName</div>
			<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => AcceptInvite(inviteFrom.InvitationId)">
				Accept
			</MudButton>
			<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => RejectInvite(inviteFrom.InvitationId)">
				Reject
			</MudButton>
		</div>
	}
</div>

@code {
	private IReadOnlyList<(Guid InvitationId, UserProfileDtoV1 UserProfile)> _invitesFrom = [];

	protected override async Task OnInitializedAsync()
	{
		var invites = await LongOperationExecutor.ExecuteLongOperationAndReturnDefaultIfError(
			() => FriendClient.GetFriendInvites(CancellationToken.None), []);
		_invitesFrom = await invites.ToAsyncEnumerable()
			.SelectAwait(invitation =>
				new ValueTask<(Guid, UserProfileDtoV1)>(
					LongOperationExecutor.ExecuteLongOperationAndReturnDefaultIfError(
						async () => (invitation.Id, await UserProfileClient.GetUserProfile(invitation.FromUserId.ToString(), CancellationToken.None)), default)))
			.ToArrayAsync();
	}

	private Task AcceptInvite(Guid invitationId)
	{
		return LongOperationExecutor.ExecuteLongOperation(
			() => FriendClient.AcceptFriendInvite(invitationId, CancellationToken.None));
	}

	private Task RejectInvite(Guid invitationId)
	{
		return LongOperationExecutor.ExecuteLongOperation(
			() => FriendClient.RejectFriendInvite(invitationId, CancellationToken.None));
	}
}